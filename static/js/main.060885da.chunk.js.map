{"version":3,"sources":["Countdown/Countdown.js","Lottie.js","Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Countdown","props","state","days","hours","min","sec","this","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","millisec","Math","floor","clearInterval","value","String","length","countDown","className","addLeadingZeros","Component","defaultProps","LottieAnimation","lotti","width","height","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","options","Footer","target","rel","href","App","year","getFullYear","color","home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.060885da.chunk.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n    }\n  }\n\n  componentDidMount() {\n    // update every second\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    // clear countdown when date is reached\n    if (diff <= 0) return false;\n\n    const timeLeft = {\n      years: 0,\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n      millisec: 0,\n    };\n\n    // calculate time difference between now and expected date\n    if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\n      diff -= timeLeft.years * 365.25 * 86400;\n    }\n    if (diff >= 86400) { // 24 * 60 * 60\n      timeLeft.days = Math.floor(diff / 86400);\n      diff -= timeLeft.days * 86400;\n    }\n    if (diff >= 3600) { // 60 * 60\n      timeLeft.hours = Math.floor(diff / 3600);\n      diff -= timeLeft.hours * 3600;\n    }\n    if (diff >= 60) {\n      timeLeft.min = Math.floor(diff / 60);\n      diff -= timeLeft.min * 60;\n    }\n    timeLeft.sec = diff;\n\n    return timeLeft;\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  addLeadingZeros(value) {\n    value = String(value);\n    while (value.length < 2) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  render() {\n    const countDown = this.state;\n\n    return (\n      <div className=\"Countdown\">\n        <span className=\"Countdown-col\">\n          <span className=\"Countdown-col-element\">\n              <strong>{this.addLeadingZeros(countDown.days)}</strong>\n              <span>{countDown.days === 1 ? 'Day' : 'Days'}</span>\n          </span>\n        </span>&nbsp;\n\n        <span className=\"Countdown-col\">\n          <span className=\"Countdown-col-element\">\n            <strong>{this.addLeadingZeros(countDown.hours)}</strong>\n            <span>Hours</span>\n          </span>\n        </span>&nbsp;\n\n\n        <span className=\"Countdown-col\">\n          <span className=\"Countdown-col-element\">\n            <strong>{this.addLeadingZeros(countDown.min)}</strong>\n            <span>Min</span>\n          </span>\n        </span>&nbsp;\n\n        <span className=\"Countdown-col\">\n          <span className=\"Countdown-col-element\">\n            <strong>{this.addLeadingZeros(countDown.sec)}</strong>\n            <span>Sec</span>\n          </span>\n        </span>\n      </div>\n    );\n  }\n}\n\nCountdown.propTypes = {\n  date: PropTypes\n};\n\nCountdown.defaultProps = {\n  date: new Date()\n};\n\nexport default Countdown;","import React from \"react\";\nimport Lottie from \"react-lottie\";\n\nexport default function LottieAnimation({ lotti, width, height }) {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: lotti,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  return (\n    <div>\n      <Lottie options={defaultOptions} height={height} width={width} />\n    </div>\n  );\n};","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <a target='_blank' rel=\"noreferrer\" href='https://proiacm.github.io/'>proiacm&hearts;2020</a>\n        </div>\n    );\n}\n\nexport default Footer; ","import React, { Component } from 'react';\nimport './App.css';\nimport Countdown from './Countdown/Countdown';\nimport Snowfall from 'react-snowfall';\nimport LottieAnimation from './Lottie';\nimport home from './Animation/xmas.json';\nimport Footer from './Footer/Footer';\n\nclass App extends Component {\n\n  render() {\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    return (\n      <div className='App'>\n        <Snowfall color='#FFFFFF'/>\n        <div className=\"text\">\n          <Countdown date={`${year}-12-25T00:00:00`} />\n          until Christmas!</div>\n        <div className=\"App-header\">\n        <LottieAnimation lotti={home} height={200} width={500} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}